!function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=i(1);var n;!function(t){const e="BlazorExtensions",i={Canvas2d:new r.ContextManager("2d"),WebGL:new r.ContextManager("webgl")};t.initialize=function(){"undefined"==typeof window||window[e]?window[e]=Object.assign({},window[e],i):window[e]=Object.assign({},i)}}(n||(n={})),n.initialize()},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ContextManager=class{constructor(t){if(this.contexts=new Map,this.webGLObject=new Array,this.webGLContext=!1,this.webGLTypes=[WebGLBuffer,WebGLShader,WebGLProgram,WebGLFramebuffer,WebGLRenderbuffer,WebGLTexture,WebGLUniformLocation],this.add=((t,e)=>{if(!t)throw new Error("Invalid canvas.");if(!this.contexts.get(t.id)){var i;if(!(i=e?t.getContext(this.contextName,e):t.getContext(this.contextName)))throw new Error("Invalid context.");this.contexts.set(t.id,i)}}),this.remove=(t=>{this.contexts.delete(t.id)}),this.setProperty=((t,e,i)=>{const r=this.getContext(t);this.setPropertyWithContext(r,e,i)}),this.getProperty=((t,e)=>{const i=this.getContext(t);return this.serialize(i[e])}),this.call=((t,e,i)=>{const r=this.getContext(t);return this.callWithContext(r,e,i)}),this.pinGLEx=(t=>{this.gl=this.getContext(t)}),this.createPinEx=(t=>{const e=this.webGLObject.length;return this.webGLObject.push(this.getContext(t)),{webGLType:"WebGLPin",id:e}}),this.usePinEx=(t=>{this.gl=this.webGLObject[t]}),this.createUniformMatrixEx=(t=>{const e=this.webGLObject.length;return this.webGLObject.push(t),{webGLType:"WebGLUniformMatrix",id:e}}),this.renderUniformMatrixIEx=(t=>{const e=window.Blazor.platform.readInt32Field(t,0),i=window.Blazor.platform.readInt32Field(t,8);this.gl.uniformMatrix4fv(this.webGLObject[e],!1,this.webGLObject[i])}),this.renderUniformMatrixEx=((t,e)=>{this.gl.uniformMatrix4fv(this.webGLObject[t],!1,this.webGLObject[e])}),this.uniformMatrix4fvEx=((t,e)=>{var i=e+12,r=Module.HEAP32[i>>2],n=new Float32Array(Module.HEAPF32.buffer,i+4,r);this.gl.uniformMatrix4fv(this.webGLObject[t],!1,n)}),this.drawElementsEx=(t=>{this.gl.drawElements(this.gl.TRIANGLES,t,this.gl.UNSIGNED_SHORT,0)}),this.bindFloatBufferEx=((t,e,i)=>{this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.webGLObject[e]),this.gl.enableVertexAttribArray(t),this.gl.vertexAttribPointer(t,i,this.gl.FLOAT,!1,0,0)}),this.bindUShortBufferEx=(t=>{this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.webGLObject[t])}),this.bindTextureEx=((t,e)=>{this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this.webGLObject[e]),this.gl.uniform1i(this.webGLObject[t],0)}),this.blendFuncEx=(()=>{this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE)}),this.enableBlendEx=(()=>{this.gl.enable(this.gl.BLEND)}),this.disableBlendEx=(()=>{this.gl.disable(this.gl.BLEND)}),this.useProgramEx=(t=>{this.gl.useProgram(this.webGLObject[t])}),this.depthMaskOnEx=(()=>{this.gl.depthMask(!0)}),this.depthMaskOffEx=(()=>{this.gl.depthMask(!1)}),this.clearDepthAndColorEx=(()=>{this.gl.clear(this.gl.DEPTH_BUFFER_BIT|this.gl.COLOR_BUFFER_BIT)}),this.clearDepthEx=(()=>{this.gl.clear(this.gl.DEPTH_BUFFER_BIT)}),this.callBatch=((t,e)=>{const i=this.getContext(t);for(let t=0;t<e.length;t++){let r=e[t].slice(2);e[t][1]?this.callWithContext(i,e[t][0],r):this.setPropertyWithContext(i,e[t][0],Array.isArray(r)&&r.length>0?r[0]:null)}}),this.callWithContext=((t,e,i)=>this.serialize(this.prototypes[e].apply(t,void 0!=i?i.map(t=>this.deserialize(e,t)):[]))),this.setPropertyWithContext=((t,e,i)=>{t[e]=this.deserialize(e,i)}),this.getContext=(t=>{if(!t)throw new Error("Invalid canvas.");const e=this.contexts.get(t.id);if(!e)throw new Error("Invalid context.");return e}),this.deserialize=((t,e)=>{if(!this.webGLContext||void 0==e)return e;if(e.hasOwnProperty("webGLType")&&e.hasOwnProperty("id"))return this.webGLObject[e.id];if(Array.isArray(e)&&!t.endsWith("v"))return Uint8Array.of(...e);if("string"!=typeof e||"bufferData"!==t&&"bufferSubData"!==t)return e;{let t=window.atob(e),r=t.length,n=new Uint8Array(r);for(var i=0;i<r;i++)n[i]=t.charCodeAt(i);return n}}),this.serialize=(t=>{if(t instanceof TextMetrics)return{width:t.width};if(!this.webGLContext||void 0==t)return t;const e=this.webGLTypes.find(e=>t instanceof e);if(void 0!=e){const i=this.webGLObject.length;return this.webGLObject.push(t),{webGLType:e.name,id:i}}return t}),this.contextName=t,"2d"===t)this.prototypes=CanvasRenderingContext2D.prototype;else{if("webgl"!==t&&"experimental-webgl"!==t)throw new Error(`Invalid context name: ${t}`);this.prototypes=WebGLRenderingContext.prototype,this.webGLContext=!0}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,